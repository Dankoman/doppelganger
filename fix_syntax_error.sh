#!/bin/bash

# Fix f√∂r syntax-fel i run_scraper.sh
echo "üîß Fixar syntax-fel i run_scraper.sh..."

# Kontrollera att vi √§r i r√§tt katalog
if [ ! -f "run_scraper.sh" ]; then
    echo "‚ùå Fel: run_scraper.sh inte hittad. K√∂r detta script fr√•n doppelganger root-katalogen"
    exit 1
fi

# Backup befintlig fil
cp run_scraper.sh run_scraper.sh.backup.syntax.$(date +%Y%m%d_%H%M%S)
echo "üì¶ Backup skapad: run_scraper.sh.backup.syntax.$(date +%Y%m%d_%H%M%S)"

echo "üîß Ers√§tter run_scraper.sh med fixad version..."

# Ers√§tt med fixad version
cat > run_scraper.sh << 'EOF'
#!/bin/bash

# Doppelganger Scraper - Enhanced Anti-Blocking Edition with Chrome Headless + Camoufox
# Hanteringsscript f√∂r Docker-baserad scraping

set -e

# F√§rger f√∂r output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Banner
show_banner() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                      üï∑Ô∏è  Doppelganger Scraper v2.0                          ‚ïë"
    echo "‚ïë         Enhanced Anti-Blocking + Chrome Headless + Camoufox Edition         ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# Kontrollera att Docker k√∂rs
check_docker() {
    if ! docker info >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker k√∂rs inte. Starta Docker f√∂rst.${NC}"
        exit 1
    fi
}

# Skapa n√∂dv√§ndiga kataloger
ensure_directories() {
    mkdir -p images crawls logs httpcache
    chmod 755 images crawls logs httpcache
}

# Camoufox-specifika funktioner
camoufox_test() {
    echo -e "${PURPLE}ü¶ä Testar Camoufox-integration...${NC}"
    echo -e "${YELLOW}üîç Startar Camoufox-server...${NC}"
    
    # Starta Camoufox-server f√∂rst
    docker-compose up -d camoufox-server
    
    # V√§nta p√• att servern startar
    echo -e "${YELLOW}‚è≥ V√§ntar p√• att Camoufox-server startar...${NC}"
    sleep 10
    
    # Kontrollera att servern svarar
    if docker-compose exec camoufox-server curl -s http://localhost:4444/wd/hub/status > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Camoufox-server √§r redo${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Camoufox-server svarar inte, forts√§tter √§nd√•...${NC}"
    fi
    
    echo -e "${BLUE}üß™ Testar scraping med Camoufox (1 profil)...${NC}"
    docker-compose run --rm camoufox-scraper scrapy crawl mpb_from_urls \
        -s CLOSESPIDER_ITEMCOUNT=1 \
        -s CAMOUFOX_ENABLED=True \
        -s LOG_LEVEL=INFO \
        -s DOWNLOAD_DELAY=10
}

camoufox_sample() {
    echo -e "${PURPLE}ü¶ä Scrapar 10 profiler med Camoufox...${NC}"
    
    # Starta Camoufox-server
    docker-compose up -d camoufox-server
    sleep 5
    
    docker-compose run --rm camoufox-scraper scrapy crawl mpb_from_urls \
        -s CLOSESPIDER_ITEMCOUNT=10 \
        -s CAMOUFOX_ENABLED=True \
        -s LOG_LEVEL=INFO \
        -s DOWNLOAD_DELAY=8
}

camoufox_run() {
    echo -e "${PURPLE}ü¶ä Scrapar alla profiler med Camoufox...${NC}"
    echo -e "${RED}‚ö†Ô∏è Detta kommer att ta mycket l√•ng tid (6360 profiler)${NC}"
    read -p "√Ñr du s√§ker? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker-compose up -d camoufox-server
        sleep 5
        
        docker-compose run --rm camoufox-scraper scrapy crawl mpb_from_urls \
            -s CAMOUFOX_ENABLED=True \
            -s LOG_LEVEL=INFO \
            -s DOWNLOAD_DELAY=8
    else
        echo "Avbrutet."
    fi
}

camoufox_debug() {
    echo -e "${PURPLE}ü¶ä Debug-l√§ge f√∂r Camoufox...${NC}"
    docker-compose up -d camoufox-server
    sleep 5
    
    docker-compose run --rm camoufox-scraper scrapy crawl mpb_from_urls \
        -s CLOSESPIDER_ITEMCOUNT=1 \
        -s CAMOUFOX_ENABLED=True \
        -s LOG_LEVEL=DEBUG \
        -s DOWNLOAD_DELAY=15 \
        -s CAMOUFOX_CLOUDFLARE_WAIT=20
}

camoufox_verify() {
    echo -e "${BLUE}üîç Verifierar Camoufox-installation...${NC}"
    docker-compose up -d camoufox-server
    sleep 10
    
    echo -e "${YELLOW}ü¶ä Kontrollerar Camoufox-server...${NC}"
    if docker-compose exec camoufox-server curl -s http://localhost:4444/wd/hub/status > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Camoufox-server fungerar${NC}"
    else
        echo -e "${RED}‚ùå Camoufox-server svarar inte${NC}"
    fi
}

camoufox_stop() {
    echo -e "${YELLOW}üõë Stoppar Camoufox-server...${NC}"
    docker-compose stop camoufox-server
    echo -e "${GREEN}‚úÖ Camoufox-server stoppad${NC}"
}

camoufox_logs() {
    echo -e "${YELLOW}üìã Visar Camoufox-server loggar...${NC}"
    docker-compose logs camoufox-server
}

camoufox_connection_test() {
    echo -e "${BLUE}üîç Testar Camoufox-server anslutning...${NC}"
    docker-compose up -d camoufox-server
    sleep 10
    
    echo -e "${YELLOW}üß™ K√∂r connection test...${NC}"
    docker-compose run --rm camoufox-scraper python3 test_camoufox_connection.py
}

camoufox_quick_test() {
    echo -e "${PURPLE}ü¶ä Snabb Camoufox-test (kortare timeouts)...${NC}"
    docker-compose up -d camoufox-server
    sleep 5
    
    docker-compose run --rm camoufox-scraper scrapy crawl mpb_from_urls \
        -s CLOSESPIDER_ITEMCOUNT=1 \
        -s CAMOUFOX_ENABLED=True \
        -s LOG_LEVEL=DEBUG \
        -s DOWNLOAD_DELAY=5 \
        -s CAMOUFOX_PAGE_LOAD_TIMEOUT=10 \
        -s CAMOUFOX_WEBDRIVER_TIMEOUT=8
}

# URL-baserade scraper-funktioner
url_test() {
    show_banner
    echo -e "${YELLOW}üß™ Testar URL-baserad scraper med 5 profiler...${NC}"
    check_docker
    ensure_directories
    
    if [ ! -f "profile_urls.txt" ]; then
        echo -e "${RED}‚ùå profile_urls.txt saknas. Kopiera filen fr√•n HTML-extraktionen.${NC}"
        exit 1
    fi
    
    echo -e "${CYAN}üìä Antal URL:er i fil: $(wc -l < profile_urls.txt)${NC}"
    
    docker-compose run --rm doppelganger-scraper scrapy crawl mpb_from_urls \
        -s CLOSESPIDER_ITEMCOUNT=5 \
        -s LOG_LEVEL=INFO
}

url_sample() {
    show_banner
    echo -e "${YELLOW}üìä K√∂r URL-baserad scraper f√∂r 100 profiler...${NC}"
    check_docker
    ensure_directories
    
    if [ ! -f "profile_urls.txt" ]; then
        echo -e "${RED}‚ùå profile_urls.txt saknas. Kopiera filen fr√•n HTML-extraktionen.${NC}"
        exit 1
    fi
    
    echo -e "${CYAN}üìä Antal URL:er i fil: $(wc -l < profile_urls.txt)${NC}"
    
    docker-compose run --rm doppelganger-scraper scrapy crawl mpb_from_urls \
        -s CLOSESPIDER_ITEMCOUNT=100 \
        -s LOG_LEVEL=INFO
}

url_run() {
    show_banner
    echo -e "${YELLOW}üöÄ K√∂r URL-baserad scraper f√∂r alla profiler...${NC}"
    check_docker
    ensure_directories
    
    if [ ! -f "profile_urls.txt" ]; then
        echo -e "${RED}‚ùå profile_urls.txt saknas. Kopiera filen fr√•n HTML-extraktionen.${NC}"
        exit 1
    fi
    
    echo -e "${CYAN}üìä Antal URL:er att scrapa: $(wc -l < profile_urls.txt)${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Detta kommer att scrapa ALLA profiler. Forts√§tt? (y/N):${NC}"
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker-compose run --rm doppelganger-scraper scrapy crawl mpb_from_urls \
            -s LOG_LEVEL=INFO
    else
        echo -e "${CYAN}‚ÑπÔ∏è  Scraping avbruten${NC}"
    fi
}

# Chrome Headless-funktioner
chrome_test() {
    show_banner
    echo -e "${YELLOW}üß™ Testar Chrome headless-integration...${NC}"
    check_docker
    
    echo -e "${CYAN}üöÄ Testar Chrome-scraper med 1 profil...${NC}"
    docker-compose run --rm doppelganger-scraper scrapy crawl mpb_from_urls \
        -s CLOSESPIDER_ITEMCOUNT=1 \
        -s LOG_LEVEL=INFO \
        -s CHROME_ENABLED=True \
        -s DOWNLOAD_DELAY=8 \
        -s CONCURRENT_REQUESTS=1
}

chrome_sample() {
    show_banner
    echo -e "${YELLOW}üìä K√∂r Chrome-scraper f√∂r 10 profiler...${NC}"
    check_docker
    ensure_directories
    
    if [ ! -f "profile_urls.txt" ]; then
        echo -e "${RED}‚ùå profile_urls.txt saknas. K√∂r f√∂rst url_test f√∂r att s√§tta upp URL-listan.${NC}"
        exit 1
    fi
    
    echo -e "${CYAN}üìä Antal URL:er: $(wc -l < profile_urls.txt)${NC}"
    
    docker-compose run --rm doppelganger-scraper scrapy crawl mpb_from_urls \
        -s CLOSESPIDER_ITEMCOUNT=10 \
        -s LOG_LEVEL=INFO \
        -s CHROME_ENABLED=True \
        -s DOWNLOAD_DELAY=8 \
        -s CONCURRENT_REQUESTS=1
}

# Hj√§lpfunktioner
show_help() {
    show_banner
    echo -e "${YELLOW}Anv√§ndning:${NC} $0 [KOMMANDO]"
    echo ""
    echo -e "${CYAN}Tillg√§ngliga kommandon:${NC}"
    echo ""
    echo -e "  ${GREEN}build${NC}           Bygg Docker-imagen med alla f√∂rb√§ttringar"
    echo -e "  ${GREEN}test${NC}            K√∂r test med begr√§nsad scraping (5 items)"
    echo -e "  ${GREEN}run${NC}             K√∂r full scraping (interaktivt)"
    echo -e "  ${GREEN}stop${NC}            Stoppa alla k√∂rande containers"
    echo -e "  ${GREEN}logs${NC}            Visa live loggar fr√•n scrapern"
    echo -e "  ${GREEN}shell${NC}           √ñppna bash-shell i container"
    echo -e "  ${GREEN}status${NC}          Visa status f√∂r containers"
    echo -e "  ${GREEN}clean${NC}           Rensa alla containers och volymer"
    echo ""
    echo -e "${CYAN}URL-baserade kommandon:${NC}"
    echo -e "  ${GREEN}url_test${NC}       Testa URL-baserad scraper (5 profiler)"
    echo -e "  ${GREEN}url_sample${NC}     Scrapa 100 profiler fr√•n URL-lista"
    echo -e "  ${GREEN}url_run${NC}        Scrapa alla profiler fr√•n URL-lista"
    echo ""
    echo -e "${CYAN}Chrome Headless-kommandon:${NC}"
    echo -e "  ${GREEN}chrome_test${NC}     Testa Chrome headless-integration (1 profil)"
    echo -e "  ${GREEN}chrome_sample${NC}   Scrapa 10 profiler med Chrome headless"
    echo ""
    echo -e "${PURPLE}Camoufox-kommandon (kringg√• Cloudflare):${NC}"
    echo "  camoufox_test     Testa Camoufox-integration (1 profil)"
    echo "  camoufox_sample   Scrapa 10 profiler med Camoufox"
    echo "  camoufox_run      Scrapa alla profiler med Camoufox"
    echo "  camoufox_debug    Debug Camoufox-scraper"
    echo "  camoufox_verify   Verifiera Camoufox-installation"
    echo "  camoufox_stop     Stoppa Camoufox-server"
    echo "  camoufox_logs     Visa Camoufox-server loggar"
    echo "  camoufox_connection_test  Testa Camoufox-server anslutning"
    echo "  camoufox_quick_test       Snabb test med kortare timeouts"
    echo ""
    echo -e "${YELLOW}Exempel:${NC}"
    echo -e "  $0 build && $0 camoufox_test     ${PURPLE}# Bygg och testa Camoufox${NC}"
    echo -e "  $0 camoufox_sample               ${PURPLE}# Scrapa 10 profiler med Camoufox${NC}"
    echo -e "  $0 url_test                      ${PURPLE}# Testa URL-scraper${NC}"
    echo -e "  $0 chrome_test                   ${PURPLE}# Testa Chrome headless${NC}"
    echo ""
}

# Huvudfunktioner
case "${1:-help}" in
    "build")
        show_banner
        echo -e "${YELLOW}üî® Bygger Docker-imagen med Enhanced Anti-Blocking + Chrome + Camoufox...${NC}"
        check_docker
        ensure_directories
        
        docker-compose build --no-cache
        
        echo -e "${GREEN}‚úÖ Docker-imagen byggd framg√•ngsrikt!${NC}"
        echo -e "${CYAN}üí° Testa nu med: $0 camoufox_test${NC}"
        ;;
        
    "test")
        show_banner
        echo -e "${YELLOW}üß™ K√∂r test med begr√§nsad scraping...${NC}"
        check_docker
        ensure_directories
        
        docker-compose run --rm doppelganger-scraper scrapy crawl mpb_all \
            -s CLOSESPIDER_ITEMCOUNT=5 \
            -s DOWNLOAD_DELAY=5 \
            -s CONCURRENT_REQUESTS=1 \
            -L INFO
        ;;
        
    "run")
        show_banner
        echo -e "${YELLOW}üöÄ K√∂r full scraping (interaktivt)...${NC}"
        check_docker
        ensure_directories
        
        docker-compose run --rm doppelganger-scraper scrapy crawl mpb_all
        ;;
        
    "stop")
        show_banner
        echo -e "${YELLOW}üõë Stoppar alla containers...${NC}"
        check_docker
        
        docker-compose down
        echo -e "${GREEN}‚úÖ Alla containers stoppade${NC}"
        ;;
        
    "logs")
        show_banner
        echo -e "${YELLOW}üìã Visar live loggar (Ctrl+C f√∂r att avsluta)...${NC}"
        check_docker
        
        docker-compose logs -f doppelganger-scraper
        ;;
        
    "shell")
        show_banner
        echo -e "${YELLOW}üêö √ñppnar bash-shell i container...${NC}"
        check_docker
        
        docker-compose run --rm doppelganger-scraper bash
        ;;
        
    "status")
        show_banner
        echo -e "${YELLOW}üìä Container-status:${NC}"
        check_docker
        
        docker-compose ps
        ;;
        
    "clean")
        show_banner
        echo -e "${YELLOW}üßπ Rensar containers och volymer...${NC}"
        check_docker
        
        read -p "‚ö†Ô∏è  Detta kommer att ta bort alla containers och data. Forts√§tt? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            docker-compose down -v
            docker system prune -f
            echo -e "${GREEN}‚úÖ Rensning klar${NC}"
        else
            echo -e "${CYAN}‚ÑπÔ∏è  Rensning avbruten${NC}"
        fi
        ;;
        
    # URL-baserade kommandon
    "url_test")
        url_test
        ;;
    "url_sample")
        url_sample
        ;;
    "url_run")
        url_run
        ;;
        
    # Chrome Headless-kommandon
    "chrome_test")
        chrome_test
        ;;
    "chrome_sample")
        chrome_sample
        ;;
        
    # Camoufox-kommandon
    "camoufox_test")
        camoufox_test
        ;;
    "camoufox_sample")
        camoufox_sample
        ;;
    "camoufox_run")
        camoufox_run
        ;;
    "camoufox_debug")
        camoufox_debug
        ;;
    "camoufox_verify")
        camoufox_verify
        ;;
    "camoufox_stop")
        camoufox_stop
        ;;
    "camoufox_logs")
        camoufox_logs
        ;;
    "camoufox_connection_test")
        camoufox_connection_test
        ;;
    "camoufox_quick_test")
        camoufox_quick_test
        ;;
        
    "help"|*)
        show_help
        ;;
esac
EOF

# G√∂r scriptet k√∂rbart
chmod +x run_scraper.sh

echo ""
echo "üéâ Syntax-fel fixat!"
echo ""
echo "üìã Vad som fixats:"
echo "  ‚úÖ Borttaget duplicerade funktioner"
echo "  ‚úÖ Fixat ofullst√§ndiga funktioner"
echo "  ‚úÖ Rensat case-statement struktur"
echo "  ‚úÖ Lagt till alla Camoufox-kommandon"
echo ""
echo "üß™ Testa nu:"
echo "  ./run_scraper.sh build"
echo "  ./run_scraper.sh camoufox_test"

