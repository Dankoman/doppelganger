"""
Camoufox Middleware f√∂r att kringg√• Cloudflare bot-protection
Anv√§nder lokal Camoufox installation ist√§llet f√∂r Docker Compose
"""

import time
import random
import logging
import asyncio
from urllib.parse import urlparse
from scrapy.http import HtmlResponse
from scrapy.exceptions import NotConfigured

logger = logging.getLogger(__name__)

class CamoufoxLocalMiddleware:
    """
    Middleware som anv√§nder lokal Camoufox f√∂r att kringg√• Cloudflare bot-protection
    """
    
    def __init__(self, crawler):
        self.crawler = crawler
        self.settings = crawler.settings
        
        # Camoufox konfiguration
        self.camoufox_enabled = self.settings.getbool('CAMOUFOX_ENABLED', True)
        
        # Anti-detection inst√§llningar
        self.page_load_timeout = self.settings.getint('CAMOUFOX_PAGE_LOAD_TIMEOUT', 30)
        self.cloudflare_wait_time = self.settings.getint('CAMOUFOX_CLOUDFLARE_WAIT', 15)
        self.human_delay_min = self.settings.getint('CAMOUFOX_HUMAN_DELAY_MIN', 2)
        self.human_delay_max = self.settings.getint('CAMOUFOX_HUMAN_DELAY_MAX', 8)
        
        # Session hantering
        self.cf_clearance_cache = {}
        self.session_cookies = {}
        self.failed_attempts = 0
        self.max_failed_attempts = 3
        
        if not self.camoufox_enabled:
            raise NotConfigured('Camoufox middleware √§r inaktiverat')
    
    @classmethod
    def from_crawler(cls, crawler):
        return cls(crawler)
    
    def process_request(self, request, spider):
        """Bearbeta request med lokal Camoufox"""
        
        if not self.camoufox_enabled:
            return None
        
        if self.failed_attempts >= self.max_failed_attempts:
            logger.warning(f"üö´ Camoufox inaktiverat efter {self.failed_attempts} misslyckade f√∂rs√∂k")
            return None
        
        try:
            # Kontrollera om vi redan har en giltig cf_clearance cookie
            domain = urlparse(request.url).netloc
            if self._has_valid_clearance(domain):
                logger.debug(f"üç™ Anv√§nder cachad cf_clearance f√∂r {domain}")
                return self._make_request_with_cookies(request)
            
            # Anv√§nd lokal Camoufox f√∂r att h√§mta sidan och hantera Cloudflare
            logger.info(f"ü¶ä Anv√§nder lokal Camoufox f√∂r {request.url}")
            
            # K√∂r async Camoufox i sync context
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                response = loop.run_until_complete(self._fetch_with_camoufox_async(request, spider))
            finally:
                loop.close()
            
            if response:
                self.failed_attempts = 0
                return response
            else:
                self.failed_attempts += 1
                logger.warning(f"‚ö†Ô∏è Camoufox misslyckades ({self.failed_attempts}/{self.max_failed_attempts})")
                return None
                
        except Exception as e:
            self.failed_attempts += 1
            logger.error(f"‚ùå Camoufox fel f√∂r {request.url}: {e}")
            return None
    
    def _has_valid_clearance(self, domain):
        """Kontrollera om vi har en giltig cf_clearance cookie"""
        if domain not in self.cf_clearance_cache:
            return False
        
        cookie_data = self.cf_clearance_cache[domain]
        if time.time() - cookie_data['timestamp'] > 1800:  # 30 minuter
            del self.cf_clearance_cache[domain]
            return False
        
        return True
    
    def _make_request_with_cookies(self, request):
        """G√∂r HTTP request med sparade cookies"""
        domain = urlparse(request.url).netloc
        
        if domain not in self.session_cookies:
            return None
        
        try:
            import requests
            session = requests.Session()
            
            # L√§gg till sparade cookies
            for cookie in self.session_cookies[domain]:
                session.cookies.set(cookie['name'], cookie['value'], domain=cookie.get('domain', domain))
            
            # L√§gg till realistiska headers
            headers = {
                'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:135.0) Gecko/20100101 Firefox/135.0',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.5',
                'Accept-Encoding': 'gzip, deflate, br, zstd',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
                'Sec-Fetch-Dest': 'document',
                'Sec-Fetch-Mode': 'navigate',
                'Sec-Fetch-Site': 'same-origin',
                'Priority': 'u=1'
            }
            
            # L√§gg till referer om det √§r en profil-URL
            if '/pornstars/' in request.url and '/index.php' in request.url:
                headers['Referer'] = f"https://{domain}/pornstars/index.php"
            
            response = session.get(request.url, headers=headers, timeout=30)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ Framg√•ngsrik request med cookies: {request.url}")
                return HtmlResponse(
                    url=request.url,
                    body=response.content,
                    encoding='utf-8',
                    request=request
                )
            else:
                logger.warning(f"‚ö†Ô∏è HTTP {response.status_code} med cookies: {request.url}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Cookie request fel: {e}")
            return None
    
    async def _fetch_with_camoufox_async(self, request, spider):
        """H√§mta sida med lokal Camoufox browser (async)"""
        try:
            from camoufox.async_api import AsyncCamoufox
        except ImportError:
            logger.error("‚ùå Camoufox inte installerat. K√∂r: pip install camoufox[geoip]")
            return None
        
        try:
            # Skapa Camoufox browser instance med korrekt async syntax
            async with AsyncCamoufox(
                headless=True,
                geoip=True,
                os='linux',
                humanize=True,  # Humanisera cursor movement
                # Proxy kan konfigureras h√§r om beh√∂vs
                # proxy={'server': 'http://proxy:port', 'username': 'user', 'password': 'pass'}
            ) as browser:
                logger.info(f"ü¶ä Camoufox browser startad f√∂r {request.url}")
                
                # Skapa ny sida
                page = await browser.new_page()
                
                # S√§tt timeout
                page.set_default_timeout(self.page_load_timeout * 1000)  # millisekunder
                
                try:
                    logger.info(f"üåê Navigerar till {request.url}")
                    start_time = time.time()
                    
                    # Navigera till sidan
                    await page.goto(request.url, wait_until='domcontentloaded')
                    
                    load_time = time.time() - start_time
                    logger.info(f"‚è±Ô∏è Sida laddad p√• {load_time:.2f}s")
                    
                    # Kontrollera f√∂r Cloudflare challenge
                    if await self._handle_cloudflare_challenge_async(page):
                        logger.info("üõ°Ô∏è Cloudflare challenge hanterat")
                    
                    # Simulera m√§nskligt beteende
                    await self._simulate_human_behavior_async(page)
                    
                    # H√§mta cookies (speciellt cf_clearance)
                    await self._save_cookies_async(page, request.url)
                    
                    # H√§mta sidans inneh√•ll
                    content = await page.content()
                    
                    logger.info(f"‚úÖ Camoufox framg√•ngsrik: {request.url} ({len(content)} tecken)")
                    
                    return HtmlResponse(
                        url=request.url,
                        body=content.encode('utf-8'),
                        encoding='utf-8',
                        request=request
                    )
                    
                except Exception as e:
                    logger.error(f"‚ùå Sida-fel f√∂r {request.url}: {e}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå Camoufox browser-fel: {e}")
            return None
    
    async def _handle_cloudflare_challenge_async(self, page):
        """Hantera Cloudflare challenge (async)"""
        try:
            # Kolla efter Cloudflare challenge
            challenge_selectors = [
                '[data-ray]',
                '.cf-browser-verification',
                '.cf-checking-browser',
                '#challenge-form',
                '.cf-challenge-running'
            ]
            
            for selector in challenge_selectors:
                elements = await page.query_selector_all(selector)
                if elements:
                    logger.info("üõ°Ô∏è Cloudflare challenge uppt√§ckt - v√§ntar...")
                    
                    # V√§nta tills challenge √§r klar
                    await asyncio.sleep(self.cloudflare_wait_time)
                    
                    # Kontrollera om challenge fortfarande finns
                    remaining_elements = await page.query_selector_all(selector)
                    if not remaining_elements:
                        logger.info("‚úÖ Cloudflare challenge klarad")
                        return True
                    else:
                        logger.warning("‚ö†Ô∏è Cloudflare challenge kvarst√•r")
                        # V√§nta lite till
                        await asyncio.sleep(5)
                        return True
                        
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Cloudflare challenge hantering fel: {e}")
        
        return False
    
    async def _simulate_human_behavior_async(self, page):
        """Simulera m√§nskligt beteende (async)"""
        try:
            # Slumpm√§ssig delay
            delay = random.uniform(self.human_delay_min, self.human_delay_max)
            await asyncio.sleep(delay)
            
            # Scrolla lite f√∂r att simulera l√§sning
            await page.evaluate("window.scrollTo(0, Math.floor(Math.random() * 500));")
            await asyncio.sleep(random.uniform(0.5, 1.5))
            
            # Scrolla tillbaka upp
            await page.evaluate("window.scrollTo(0, 0);")
            await asyncio.sleep(random.uniform(0.3, 1.0))
            
        except Exception as e:
            logger.debug(f"Simulering av m√§nskligt beteende fel: {e}")
    
    async def _save_cookies_async(self, page, url):
        """Spara cookies f√∂r framtida anv√§ndning (async)"""
        try:
            domain = urlparse(url).netloc
            cookies = await page.context.cookies()
            
            # Filtrera cookies f√∂r denna domain
            domain_cookies = [
                cookie for cookie in cookies 
                if domain in cookie.get('domain', '') or cookie.get('domain', '').startswith('.')
            ]
            
            # Spara alla cookies
            self.session_cookies[domain] = domain_cookies
            
            # Spara cf_clearance specifikt
            for cookie in domain_cookies:
                if cookie['name'] == 'cf_clearance':
                    self.cf_clearance_cache[domain] = {
                        'value': cookie['value'],
                        'timestamp': time.time()
                    }
                    logger.info(f"üç™ cf_clearance cookie sparad f√∂r {domain}")
                    break
                    
        except Exception as e:
            logger.warning(f"Cookie sparning fel: {e}")
    
    def spider_closed(self, spider):
        """Cleanup n√§r spider st√§ngs"""
        logger.info("üîí Camoufox middleware st√§ngd")


class CamoufoxLocalDownloaderMiddleware:
    """
    Downloader middleware f√∂r lokal Camoufox integration
    """
    
    def __init__(self, settings):
        self.camoufox_enabled = settings.getbool('CAMOUFOX_ENABLED', True)
        
        if self.camoufox_enabled:
            logger.info("ü¶ä Camoufox Lokal Downloader Middleware aktiverat")
    
    @classmethod
    def from_crawler(cls, crawler):
        return cls(crawler.settings)
    
    def process_request(self, request, spider):
        """Process requests through local Camoufox if needed"""
        # Denna middleware arbetar tillsammans med CamoufoxLocalMiddleware
        return None

